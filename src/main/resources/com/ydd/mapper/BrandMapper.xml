<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<!--
      mapper为映射的根节点，用来管理DAO接口
      namespace指定DAO接口的完整类名，表示mapper配置文件管理哪个DAO接口(包.接口名)
      mybatis会依据这个接口动态创建一个实现类去实现这个接口，而这个实现类是一个Mapper对象
   -->
<mapper namespace="com.ydd.mapper.BrandMapper">
    <insert id="addBrand" keyProperty="id" useGeneratedKeys="true">
        insert into tb_brand
        values (null, #{brand_name}, #{company_name}, #{ordered}, #{description}, #{status})
    </insert>
    <update id="updateById">
        update tb_brand
        set brand_name=#{brand_name},
            company_name=#{company_name},
            ordered=#{ordered},
            description=#{description},
            status=#{status}
        where id = #{id}
    </update>
    <delete id="deleteById">
        delete
        from tb_brand
        where id = #{id}
    </delete>
    <delete id="deleteByIds">
        delete from tb_brand where id in
        <foreach collection="ids" item="id" separator="," open="(" close=")">
            #{id}
        </foreach>
    </delete>
    <!--
          id = "接口中的方法名"
          parameterType = "接口中传入方法的参数类型"
          resultType = "返回实体类对象：包.类名" 
          注意:sql语句后不要出现";"号
              查询：select标签
              增加：insert标签
              修改：update标签
              删除：delete标签
      -->
    <select id="selectAll" resultType="brand">
        select *
        from tb_brand
    </select>
    <select id="selectById" resultType="brand">
        select *
        from tb_brand
        where id = #{id}
    </select>
    <select id="selectPage" resultType="brand">
        select *
        from tb_brand limit #{begin},#{size}
    </select>
    <select id="selectCount" resultType="Integer">
        select count(*)
        from tb_brand
    </select>
    <select id="selectPageAndCondition" resultType="brand">
        select * from tb_brand
        <where>
            <if test="brand.company_name!=null and brand.company_name!='' ">
                and company_name like #{brand.company_name}
            </if>
            <if test="brand.brand_name!=null and brand.brand_name!='' ">
                and brand_name like #{brand.brand_name}
            </if>
            <if test="brand.status!=null">
                and status = #{brand.status}
            </if>
        </where>
        limit #{begin},#{size}
    </select>
    <select id="selectCountAndCondition" resultType="java.lang.Integer">
        select count(*) from tb_brand
        <where>
            <if test="brand_name!=null and  brand_name!='' ">
                and brand_name like #{ brand_name}
            </if>
            <if test="company_name!=null and  company_name!='' ">
                and company_name like #{ company_name}
            </if>
            <if test="status!=null">
                and status = #{ status}
            </if>
        </where>
    </select>
</mapper>
